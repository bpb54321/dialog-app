// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  dialog: (where?: DialogWhereInput) => Promise<boolean>;
  line: (where?: LineWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  dialog: (where: DialogWhereUniqueInput) => DialogNullablePromise;
  dialogs: (args?: {
    where?: DialogWhereInput;
    orderBy?: DialogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Dialog>;
  dialogsConnection: (args?: {
    where?: DialogWhereInput;
    orderBy?: DialogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DialogConnectionPromise;
  line: (where: LineWhereUniqueInput) => LineNullablePromise;
  lines: (args?: {
    where?: LineWhereInput;
    orderBy?: LineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Line>;
  linesConnection: (args?: {
    where?: LineWhereInput;
    orderBy?: LineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LineConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RoleNullablePromise;
  roles: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Role>;
  rolesConnection: (args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDialog: (data: DialogCreateInput) => DialogPromise;
  updateDialog: (args: {
    data: DialogUpdateInput;
    where: DialogWhereUniqueInput;
  }) => DialogPromise;
  updateManyDialogs: (args: {
    data: DialogUpdateManyMutationInput;
    where?: DialogWhereInput;
  }) => BatchPayloadPromise;
  upsertDialog: (args: {
    where: DialogWhereUniqueInput;
    create: DialogCreateInput;
    update: DialogUpdateInput;
  }) => DialogPromise;
  deleteDialog: (where: DialogWhereUniqueInput) => DialogPromise;
  deleteManyDialogs: (where?: DialogWhereInput) => BatchPayloadPromise;
  createLine: (data: LineCreateInput) => LinePromise;
  updateLine: (args: {
    data: LineUpdateInput;
    where: LineWhereUniqueInput;
  }) => LinePromise;
  updateManyLines: (args: {
    data: LineUpdateManyMutationInput;
    where?: LineWhereInput;
  }) => BatchPayloadPromise;
  upsertLine: (args: {
    where: LineWhereUniqueInput;
    create: LineCreateInput;
    update: LineUpdateInput;
  }) => LinePromise;
  deleteLine: (where: LineWhereUniqueInput) => LinePromise;
  deleteManyLines: (where?: LineWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (args: {
    data: RoleUpdateInput;
    where: RoleWhereUniqueInput;
  }) => RolePromise;
  updateManyRoles: (args: {
    data: RoleUpdateManyMutationInput;
    where?: RoleWhereInput;
  }) => BatchPayloadPromise;
  upsertRole: (args: {
    where: RoleWhereUniqueInput;
    create: RoleCreateInput;
    update: RoleUpdateInput;
  }) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  dialog: (
    where?: DialogSubscriptionWhereInput
  ) => DialogSubscriptionPayloadSubscription;
  line: (
    where?: LineSubscriptionWhereInput
  ) => LineSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RoleOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type LineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "number_ASC"
  | "number_DESC";

export type DialogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "languageCode_ASC"
  | "languageCode_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LineUpdateManyWithoutDialogInput {
  create?: Maybe<LineCreateWithoutDialogInput[] | LineCreateWithoutDialogInput>;
  delete?: Maybe<LineWhereUniqueInput[] | LineWhereUniqueInput>;
  connect?: Maybe<LineWhereUniqueInput[] | LineWhereUniqueInput>;
  set?: Maybe<LineWhereUniqueInput[] | LineWhereUniqueInput>;
  disconnect?: Maybe<LineWhereUniqueInput[] | LineWhereUniqueInput>;
  update?: Maybe<
    | LineUpdateWithWhereUniqueWithoutDialogInput[]
    | LineUpdateWithWhereUniqueWithoutDialogInput
  >;
  upsert?: Maybe<
    | LineUpsertWithWhereUniqueWithoutDialogInput[]
    | LineUpsertWithWhereUniqueWithoutDialogInput
  >;
  deleteMany?: Maybe<LineScalarWhereInput[] | LineScalarWhereInput>;
  updateMany?: Maybe<
    LineUpdateManyWithWhereNestedInput[] | LineUpdateManyWithWhereNestedInput
  >;
}

export type DialogWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DialogCreateWithoutRolesInput {
  id?: Maybe<ID_Input>;
  name: String;
  lines?: Maybe<LineCreateManyWithoutDialogInput>;
  user: UserCreateOneWithoutDialogsInput;
  languageCode: String;
}

export interface DialogUpdateOneRequiredWithoutLinesInput {
  create?: Maybe<DialogCreateWithoutLinesInput>;
  update?: Maybe<DialogUpdateWithoutLinesDataInput>;
  upsert?: Maybe<DialogUpsertWithoutLinesInput>;
  connect?: Maybe<DialogWhereUniqueInput>;
}

export interface UserCreateOneWithoutDialogsInput {
  create?: Maybe<UserCreateWithoutDialogsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface RoleUpdateDataInput {
  name?: Maybe<String>;
  dialog?: Maybe<DialogUpdateOneRequiredWithoutRolesInput>;
}

export interface UserCreateWithoutDialogsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface DialogUpdateInput {
  name?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutDialogInput>;
  lines?: Maybe<LineUpdateManyWithoutDialogInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutDialogsInput>;
  languageCode?: Maybe<String>;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoleWhereInput>;
  AND?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  OR?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
  NOT?: Maybe<RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput>;
}

export interface RoleUpdateManyWithoutDialogInput {
  create?: Maybe<RoleCreateWithoutDialogInput[] | RoleCreateWithoutDialogInput>;
  delete?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  set?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  disconnect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
  update?: Maybe<
    | RoleUpdateWithWhereUniqueWithoutDialogInput[]
    | RoleUpdateWithWhereUniqueWithoutDialogInput
  >;
  upsert?: Maybe<
    | RoleUpsertWithWhereUniqueWithoutDialogInput[]
    | RoleUpsertWithWhereUniqueWithoutDialogInput
  >;
  deleteMany?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  updateMany?: Maybe<
    RoleUpdateManyWithWhereNestedInput[] | RoleUpdateManyWithWhereNestedInput
  >;
}

export interface RoleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  dialog?: Maybe<DialogWhereInput>;
  AND?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  OR?: Maybe<RoleWhereInput[] | RoleWhereInput>;
  NOT?: Maybe<RoleWhereInput[] | RoleWhereInput>;
}

export interface RoleUpdateWithWhereUniqueWithoutDialogInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutDialogDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface RoleUpdateWithoutDialogDataInput {
  name?: Maybe<String>;
}

export interface DialogUpdateManyWithWhereNestedInput {
  where: DialogScalarWhereInput;
  data: DialogUpdateManyDataInput;
}

export interface RoleUpsertWithWhereUniqueWithoutDialogInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutDialogDataInput;
  create: RoleCreateWithoutDialogInput;
}

export type LineWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  OR?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
  NOT?: Maybe<RoleScalarWhereInput[] | RoleScalarWhereInput>;
}

export interface DialogUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutDialogInput>;
  lines?: Maybe<LineUpdateManyWithoutDialogInput>;
  languageCode?: Maybe<String>;
}

export interface RoleUpdateManyWithWhereNestedInput {
  where: RoleScalarWhereInput;
  data: RoleUpdateManyDataInput;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RoleUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  dialogs?: Maybe<DialogUpdateManyWithoutUserInput>;
}

export interface LineUpdateManyMutationInput {
  text?: Maybe<String>;
  number?: Maybe<Int>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface LineUpdateWithWhereUniqueWithoutDialogInput {
  where: LineWhereUniqueInput;
  data: LineUpdateWithoutDialogDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  dialogs?: Maybe<DialogCreateManyWithoutUserInput>;
}

export interface LineUpdateWithoutDialogDataInput {
  text?: Maybe<String>;
  role?: Maybe<RoleUpdateOneInput>;
  number?: Maybe<Int>;
}

export interface RoleUpdateInput {
  name?: Maybe<String>;
  dialog?: Maybe<DialogUpdateOneRequiredWithoutRolesInput>;
}

export interface RoleUpdateOneInput {
  create?: Maybe<RoleCreateInput>;
  update?: Maybe<RoleUpdateDataInput>;
  upsert?: Maybe<RoleUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface DialogCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  roles?: Maybe<RoleCreateManyWithoutDialogInput>;
  lines?: Maybe<LineCreateManyWithoutDialogInput>;
  user: UserCreateOneWithoutDialogsInput;
  languageCode: String;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  dialogs_every?: Maybe<DialogWhereInput>;
  dialogs_some?: Maybe<DialogWhereInput>;
  dialogs_none?: Maybe<DialogWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface RoleCreateWithoutDialogInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface DialogUpdateOneRequiredWithoutRolesInput {
  create?: Maybe<DialogCreateWithoutRolesInput>;
  update?: Maybe<DialogUpdateWithoutRolesDataInput>;
  upsert?: Maybe<DialogUpsertWithoutRolesInput>;
  connect?: Maybe<DialogWhereUniqueInput>;
}

export interface LineCreateWithoutDialogInput {
  id?: Maybe<ID_Input>;
  text: String;
  role?: Maybe<RoleCreateOneInput>;
  number: Int;
}

export interface DialogUpdateWithoutRolesDataInput {
  name?: Maybe<String>;
  lines?: Maybe<LineUpdateManyWithoutDialogInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutDialogsInput>;
  languageCode?: Maybe<String>;
}

export interface RoleCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  dialog: DialogCreateOneWithoutRolesInput;
}

export interface UserUpdateOneRequiredWithoutDialogsInput {
  create?: Maybe<UserCreateWithoutDialogsInput>;
  update?: Maybe<UserUpdateWithoutDialogsDataInput>;
  upsert?: Maybe<UserUpsertWithoutDialogsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LineWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  role?: Maybe<RoleWhereInput>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  dialog?: Maybe<DialogWhereInput>;
  AND?: Maybe<LineWhereInput[] | LineWhereInput>;
  OR?: Maybe<LineWhereInput[] | LineWhereInput>;
  NOT?: Maybe<LineWhereInput[] | LineWhereInput>;
}

export interface UserUpdateWithoutDialogsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface LineSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LineWhereInput>;
  AND?: Maybe<LineSubscriptionWhereInput[] | LineSubscriptionWhereInput>;
  OR?: Maybe<LineSubscriptionWhereInput[] | LineSubscriptionWhereInput>;
  NOT?: Maybe<LineSubscriptionWhereInput[] | LineSubscriptionWhereInput>;
}

export interface UserUpsertWithoutDialogsInput {
  update: UserUpdateWithoutDialogsDataInput;
  create: UserCreateWithoutDialogsInput;
}

export interface DialogUpdateManyDataInput {
  name?: Maybe<String>;
  languageCode?: Maybe<String>;
}

export interface DialogUpsertWithoutRolesInput {
  update: DialogUpdateWithoutRolesDataInput;
  create: DialogCreateWithoutRolesInput;
}

export interface DialogUpsertWithWhereUniqueWithoutUserInput {
  where: DialogWhereUniqueInput;
  update: DialogUpdateWithoutUserDataInput;
  create: DialogCreateWithoutUserInput;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface DialogUpdateManyWithoutUserInput {
  create?: Maybe<DialogCreateWithoutUserInput[] | DialogCreateWithoutUserInput>;
  delete?: Maybe<DialogWhereUniqueInput[] | DialogWhereUniqueInput>;
  connect?: Maybe<DialogWhereUniqueInput[] | DialogWhereUniqueInput>;
  set?: Maybe<DialogWhereUniqueInput[] | DialogWhereUniqueInput>;
  disconnect?: Maybe<DialogWhereUniqueInput[] | DialogWhereUniqueInput>;
  update?: Maybe<
    | DialogUpdateWithWhereUniqueWithoutUserInput[]
    | DialogUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | DialogUpsertWithWhereUniqueWithoutUserInput[]
    | DialogUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<DialogScalarWhereInput[] | DialogScalarWhereInput>;
  updateMany?: Maybe<
    | DialogUpdateManyWithWhereNestedInput[]
    | DialogUpdateManyWithWhereNestedInput
  >;
}

export interface LineUpsertWithWhereUniqueWithoutDialogInput {
  where: LineWhereUniqueInput;
  update: LineUpdateWithoutDialogDataInput;
  create: LineCreateWithoutDialogInput;
}

export interface DialogCreateManyWithoutUserInput {
  create?: Maybe<DialogCreateWithoutUserInput[] | DialogCreateWithoutUserInput>;
  connect?: Maybe<DialogWhereUniqueInput[] | DialogWhereUniqueInput>;
}

export interface LineScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  AND?: Maybe<LineScalarWhereInput[] | LineScalarWhereInput>;
  OR?: Maybe<LineScalarWhereInput[] | LineScalarWhereInput>;
  NOT?: Maybe<LineScalarWhereInput[] | LineScalarWhereInput>;
}

export interface LineCreateManyWithoutDialogInput {
  create?: Maybe<LineCreateWithoutDialogInput[] | LineCreateWithoutDialogInput>;
  connect?: Maybe<LineWhereUniqueInput[] | LineWhereUniqueInput>;
}

export interface LineUpdateManyWithWhereNestedInput {
  where: LineScalarWhereInput;
  data: LineUpdateManyDataInput;
}

export interface DialogCreateOneWithoutRolesInput {
  create?: Maybe<DialogCreateWithoutRolesInput>;
  connect?: Maybe<DialogWhereUniqueInput>;
}

export interface LineUpdateManyDataInput {
  text?: Maybe<String>;
  number?: Maybe<Int>;
}

export interface DialogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DialogWhereInput>;
  AND?: Maybe<DialogSubscriptionWhereInput[] | DialogSubscriptionWhereInput>;
  OR?: Maybe<DialogSubscriptionWhereInput[] | DialogSubscriptionWhereInput>;
  NOT?: Maybe<DialogSubscriptionWhereInput[] | DialogSubscriptionWhereInput>;
}

export interface DialogUpdateManyMutationInput {
  name?: Maybe<String>;
  languageCode?: Maybe<String>;
}

export interface DialogUpdateWithWhereUniqueWithoutUserInput {
  where: DialogWhereUniqueInput;
  data: DialogUpdateWithoutUserDataInput;
}

export interface DialogUpsertWithoutLinesInput {
  update: DialogUpdateWithoutLinesDataInput;
  create: DialogCreateWithoutLinesInput;
}

export interface RoleUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface DialogUpdateWithoutLinesDataInput {
  name?: Maybe<String>;
  roles?: Maybe<RoleUpdateManyWithoutDialogInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutDialogsInput>;
  languageCode?: Maybe<String>;
}

export interface RoleCreateOneInput {
  create?: Maybe<RoleCreateInput>;
  connect?: Maybe<RoleWhereUniqueInput>;
}

export interface LineUpdateInput {
  text?: Maybe<String>;
  role?: Maybe<RoleUpdateOneInput>;
  number?: Maybe<Int>;
  dialog?: Maybe<DialogUpdateOneRequiredWithoutLinesInput>;
}

export interface DialogCreateWithoutLinesInput {
  id?: Maybe<ID_Input>;
  name: String;
  roles?: Maybe<RoleCreateManyWithoutDialogInput>;
  user: UserCreateOneWithoutDialogsInput;
  languageCode: String;
}

export interface DialogCreateOneWithoutLinesInput {
  create?: Maybe<DialogCreateWithoutLinesInput>;
  connect?: Maybe<DialogWhereUniqueInput>;
}

export interface LineCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  role?: Maybe<RoleCreateOneInput>;
  number: Int;
  dialog: DialogCreateOneWithoutLinesInput;
}

export interface DialogWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  roles_every?: Maybe<RoleWhereInput>;
  roles_some?: Maybe<RoleWhereInput>;
  roles_none?: Maybe<RoleWhereInput>;
  lines_every?: Maybe<LineWhereInput>;
  lines_some?: Maybe<LineWhereInput>;
  lines_none?: Maybe<LineWhereInput>;
  user?: Maybe<UserWhereInput>;
  languageCode?: Maybe<String>;
  languageCode_not?: Maybe<String>;
  languageCode_in?: Maybe<String[] | String>;
  languageCode_not_in?: Maybe<String[] | String>;
  languageCode_lt?: Maybe<String>;
  languageCode_lte?: Maybe<String>;
  languageCode_gt?: Maybe<String>;
  languageCode_gte?: Maybe<String>;
  languageCode_contains?: Maybe<String>;
  languageCode_not_contains?: Maybe<String>;
  languageCode_starts_with?: Maybe<String>;
  languageCode_not_starts_with?: Maybe<String>;
  languageCode_ends_with?: Maybe<String>;
  languageCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<DialogWhereInput[] | DialogWhereInput>;
  OR?: Maybe<DialogWhereInput[] | DialogWhereInput>;
  NOT?: Maybe<DialogWhereInput[] | DialogWhereInput>;
}

export interface RoleCreateManyWithoutDialogInput {
  create?: Maybe<RoleCreateWithoutDialogInput[] | RoleCreateWithoutDialogInput>;
  connect?: Maybe<RoleWhereUniqueInput[] | RoleWhereUniqueInput>;
}

export interface DialogCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  roles?: Maybe<RoleCreateManyWithoutDialogInput>;
  lines?: Maybe<LineCreateManyWithoutDialogInput>;
  languageCode: String;
}

export interface DialogScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  languageCode?: Maybe<String>;
  languageCode_not?: Maybe<String>;
  languageCode_in?: Maybe<String[] | String>;
  languageCode_not_in?: Maybe<String[] | String>;
  languageCode_lt?: Maybe<String>;
  languageCode_lte?: Maybe<String>;
  languageCode_gt?: Maybe<String>;
  languageCode_gte?: Maybe<String>;
  languageCode_contains?: Maybe<String>;
  languageCode_not_contains?: Maybe<String>;
  languageCode_starts_with?: Maybe<String>;
  languageCode_not_starts_with?: Maybe<String>;
  languageCode_ends_with?: Maybe<String>;
  languageCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<DialogScalarWhereInput[] | DialogScalarWhereInput>;
  OR?: Maybe<DialogScalarWhereInput[] | DialogScalarWhereInput>;
  NOT?: Maybe<DialogScalarWhereInput[] | DialogScalarWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface DialogEdge {
  node: Dialog;
  cursor: String;
}

export interface DialogEdgePromise extends Promise<DialogEdge>, Fragmentable {
  node: <T = DialogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DialogEdgeSubscription
  extends Promise<AsyncIterator<DialogEdge>>,
    Fragmentable {
  node: <T = DialogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DialogConnection {
  pageInfo: PageInfo;
  edges: DialogEdge[];
}

export interface DialogConnectionPromise
  extends Promise<DialogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DialogEdge>>() => T;
  aggregate: <T = AggregateDialogPromise>() => T;
}

export interface DialogConnectionSubscription
  extends Promise<AsyncIterator<DialogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DialogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDialogSubscription>() => T;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Dialog {
  id: ID_Output;
  name: String;
  languageCode: String;
}

export interface DialogPromise extends Promise<Dialog>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lines: <T = FragmentableArray<Line>>(args?: {
    where?: LineWhereInput;
    orderBy?: LineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  languageCode: () => Promise<String>;
}

export interface DialogSubscription
  extends Promise<AsyncIterator<Dialog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lines: <T = Promise<AsyncIterator<LineSubscription>>>(args?: {
    where?: LineWhereInput;
    orderBy?: LineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  languageCode: () => Promise<AsyncIterator<String>>;
}

export interface DialogNullablePromise
  extends Promise<Dialog | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  roles: <T = FragmentableArray<Role>>(args?: {
    where?: RoleWhereInput;
    orderBy?: RoleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lines: <T = FragmentableArray<Line>>(args?: {
    where?: LineWhereInput;
    orderBy?: LineOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  languageCode: () => Promise<String>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface DialogSubscriptionPayload {
  mutation: MutationType;
  node: Dialog;
  updatedFields: String[];
  previousValues: DialogPreviousValues;
}

export interface DialogSubscriptionPayloadPromise
  extends Promise<DialogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DialogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DialogPreviousValuesPromise>() => T;
}

export interface DialogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DialogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DialogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DialogPreviousValuesSubscription>() => T;
}

export interface LineEdge {
  node: Line;
  cursor: String;
}

export interface LineEdgePromise extends Promise<LineEdge>, Fragmentable {
  node: <T = LinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LineEdgeSubscription
  extends Promise<AsyncIterator<LineEdge>>,
    Fragmentable {
  node: <T = LineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DialogPreviousValues {
  id: ID_Output;
  name: String;
  languageCode: String;
}

export interface DialogPreviousValuesPromise
  extends Promise<DialogPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  languageCode: () => Promise<String>;
}

export interface DialogPreviousValuesSubscription
  extends Promise<AsyncIterator<DialogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  languageCode: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDialog {
  count: Int;
}

export interface AggregateDialogPromise
  extends Promise<AggregateDialog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDialogSubscription
  extends Promise<AsyncIterator<AggregateDialog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  dialogs: <T = FragmentableArray<Dialog>>(args?: {
    where?: DialogWhereInput;
    orderBy?: DialogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  dialogs: <T = Promise<AsyncIterator<DialogSubscription>>>(args?: {
    where?: DialogWhereInput;
    orderBy?: DialogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  dialogs: <T = FragmentableArray<Dialog>>(args?: {
    where?: DialogWhereInput;
    orderBy?: DialogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface Line {
  id: ID_Output;
  text: String;
  number: Int;
}

export interface LinePromise extends Promise<Line>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  role: <T = RolePromise>() => T;
  number: () => Promise<Int>;
  dialog: <T = DialogPromise>() => T;
}

export interface LineSubscription
  extends Promise<AsyncIterator<Line>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  role: <T = RoleSubscription>() => T;
  number: () => Promise<AsyncIterator<Int>>;
  dialog: <T = DialogSubscription>() => T;
}

export interface LineNullablePromise
  extends Promise<Line | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  role: <T = RolePromise>() => T;
  number: () => Promise<Int>;
  dialog: <T = DialogPromise>() => T;
}

export interface LinePreviousValues {
  id: ID_Output;
  text: String;
  number: Int;
}

export interface LinePreviousValuesPromise
  extends Promise<LinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  number: () => Promise<Int>;
}

export interface LinePreviousValuesSubscription
  extends Promise<AsyncIterator<LinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
}

export interface LineSubscriptionPayload {
  mutation: MutationType;
  node: Line;
  updatedFields: String[];
  previousValues: LinePreviousValues;
}

export interface LineSubscriptionPayloadPromise
  extends Promise<LineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinePreviousValuesPromise>() => T;
}

export interface LineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinePreviousValuesSubscription>() => T;
}

export interface Role {
  id: ID_Output;
  name: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dialog: <T = DialogPromise>() => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  dialog: <T = DialogSubscription>() => T;
}

export interface RoleNullablePromise
  extends Promise<Role | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  dialog: <T = DialogPromise>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LineConnection {
  pageInfo: PageInfo;
  edges: LineEdge[];
}

export interface LineConnectionPromise
  extends Promise<LineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LineEdge>>() => T;
  aggregate: <T = AggregateLinePromise>() => T;
}

export interface LineConnectionSubscription
  extends Promise<AsyncIterator<LineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLineSubscription>() => T;
}

export interface AggregateLine {
  count: Int;
}

export interface AggregateLinePromise
  extends Promise<AggregateLine>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLineSubscription
  extends Promise<AsyncIterator<AggregateLine>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Dialog",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Line",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
