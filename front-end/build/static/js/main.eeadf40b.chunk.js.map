{"version":3,"sources":["types/InteractionMode.ts","utils/fetch-data.ts","types/SpeechRecognitionState.ts","pages/DialogListPage.tsx","contexts/GlobalContext.tsx","pages/AuthPage.tsx","RolePicker.tsx","pages/ChooseRolePage.tsx","Line.tsx","ListOfLines.tsx","SpeechInputButton.tsx","LineGuess.tsx","pages/PracticePage.tsx","App.tsx","index.tsx"],"names":["InteractionMode","fetchData","query","token","arguments","length","undefined","apiEndpoint","resultCallback","errorMessageCallback","fetch","method","body","JSON","stringify","headers","Authorization","concat","Content-Type","mode","then","response","json","errors","errorMessage","reduce","accumulator","error","message","catch","console","log","SpeechRecognitionState","DialogListPage","state","dialogs","_this2","this","data","props","context","setState","_this3","react_default","a","createElement","map","dialog","key","id","react_router_dom","to","match","url","name","React","Component","defaultContext","chosenRole","speechRecognition","actions","setUserData","setChosenRole","role","GlobalContext","createContext","GlobalConsumer","Consumer","GlobalProvider","_React$Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initialState","process","inherits","createClass","value","Provider","children","AuthPage","email","password","handleSubmit","event","userContext","preventDefault","_this$state","loginMutation","login","handleInputChange","defineProperty","target","className","onSubmit","htmlFor","type","onChange","RolePicker","possibleRoles","handleChange","selectedOption","selectedOptions","text","newUrl","replace","history","push","dialogId","params","rolesInDialog","lines","line","find","Fragment","data-testid","index","ChooseRolePage","RolePicker_RolePicker","Line","guess","ListOfLines","filter","lineData","number","lastLineToDisplay","Line_Line","SpeechInputButton","handleToggleSpeechInput","updateSpeechRecognitionState","onClick","speechRecognitionState","Stopped","LineGuess","stop","addLineGuessToLastLine","start","Started","onresult","results","result_phrase","i","transcript","placeholder","userRole","SpeechInputButton_SpeechInputButton","PracticePage","userLineNumberIndex","userLineNumbers","PracticingLines","addGuessToCurrentLineAndIncrementLineNumber","lineGuess","previousState","currentLineNumber","nextLineIndex","nextMode","nextDialog","objectSpread","DialogComplete","calculateUserLineNumbers","_this3$state","ListOfLines_ListOfLines","LineGuess_LineGuess","App","_getPrototypeOf2","_len","args","Array","_key","apply","currentDialog","numberOfLinesInDialog","userRoleLineIndex","userRoleLineNumbers","LoadingData","setUserRoleAndChangeMode","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_x","GlobalContext_GlobalProvider","react_router","exact","from","path","render","routeProps","DialogListPage_DialogListPage","assign","ChooseRolePage_ChooseRolePage","PracticePage_PracticePage","component","ReactDOM","App_App","webkitSpeechRecognition","document","getElementById"],"mappings":"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","file":"static/js/main.eeadf40b.chunk.js","sourcesContent":["export enum InteractionMode {\n    LoadingData = \"LOADING_DATA\",\n    ChoosingDialog = \"CHOOSING_DIALOG\",\n    ChoosingRole = \"CHOOSING_ROLE\",\n    PracticingLines = \"PRACTICING_LINES\",\n    DialogComplete = \"DIALOG_COMPLETE\",\n}\n","import GraphqlError from \"../types/GraphqlError\";\n\nexport default function fetchData(\n  query: string, token: string = \"\", apiEndpoint: string, resultCallback: (body: any) => void,\n  errorMessageCallback: (errorMessage: string) => void\n): void {\n  fetch(apiEndpoint, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: query,\n    }),\n    headers: {\n      \"Authorization\": token ? `Bearer ${token}` : \"\",\n      \"Content-Type\": \"application/json\",\n    },\n    mode: \"cors\",\n  }).then((response) => {\n    return response.json();\n  }).then((body) => {\n    if (body.errors) {\n      let errorMessage = body.errors.reduce((accumulator: string, error: GraphqlError) => {\n        return accumulator + \" \" + error.message;\n      }, \"\");\n      errorMessageCallback(errorMessage);\n    } else {\n      resultCallback(body);\n    }\n  }).catch((error) => {\n    console.log(error);\n  });\n}\n","export enum SpeechRecognitionState {\n  Started = \"Started\",\n  Stopped = \"Stopped\",\n}\n","import React from 'react';\nimport {GlobalContextObject} from \"../types/GlobalContextObject\";\nimport Dialog from \"../types/Dialog\";\nimport {Link} from \"react-router-dom\";\nimport fetchData from \"../utils/fetch-data\";\n\ninterface Props {\n  context: GlobalContextObject;\n  match: any;\n  location: any;\n  history: any;\n}\n\ninterface State {\n  errorMessage: string;\n  dialogs: Dialog[];\n}\n\nexport default class DialogListPage extends React.Component<Props, State> {\n\n  state = {\n    errorMessage: \"\",\n    dialogs: [],\n  };\n\n  componentDidMount() {\n    const {data} = this.props.context;\n\n    const dialogQuery = `\n      query {\n          dialogs {\n            name\n            id\n          }\n      }\n    `;\n\n    fetchData(dialogQuery, data.token, data.apiEndpoint, (body) => {\n      this.setState({\n        dialogs: body.data.dialogs\n      });\n    }, (errorMessage) => {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>The Dialog List Page</h1>\n        <ul>\n          {this.state.dialogs.map(\n            (dialog: Dialog) => {\n              return (\n                <li key={dialog.id}>\n                  <Link to={`${this.props.match.url}/${dialog.id}/choose-role`}>{dialog.name}</Link>\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {GlobalContextObject} from \"../types/GlobalContextObject\";\nimport Role from \"../types/Role\";\n\nconst defaultContext: GlobalContextObject = {\n  data: {\n    token: \"\",\n    apiEndpoint: \"\",\n    chosenRole: {\n      id: \"\",\n      name: \"\",\n    },\n    speechRecognition: null,\n  },\n  actions: {\n    setUserData: (token: string) => {\n      return;\n    },\n    setChosenRole: (role: Role) => {\n      return;\n    },\n  },\n};\nconst GlobalContext = React.createContext<GlobalContextObject>(defaultContext);\n\nexport const GlobalConsumer = GlobalContext.Consumer;\n\ninterface Props {\n  speechRecognition: any;\n}\n\ninterface State {\n  token: string;\n  apiEndpoint: string;\n  chosenRole: Role;\n  speechRecognition: any;\n}\n\nexport class GlobalProvider extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    let {data: initialState} = defaultContext;\n\n    if (process.env.NODE_ENV === \"development\") {\n      initialState.apiEndpoint = (process.env.REACT_APP_LOCAL_API_ENDPOINT as string);\n    } else { // production\n      initialState.apiEndpoint = (process.env.REACT_APP_PRODUCTION_API_ENDPOINT as string);\n    }\n\n    initialState.speechRecognition = props.speechRecognition;\n\n    this.state = initialState;\n  }\n\n  setUserData = (token: string) => {\n    this.setState({\n      token\n    });\n  };\n\n  setChosenRole = (role: Role) => {\n    this.setState({\n      chosenRole: role,\n    });\n  };\n\n  render() {\n    return (\n      <GlobalContext.Provider value={{\n        data: this.state,\n        actions: {\n          setUserData: this.setUserData,\n          setChosenRole: this.setChosenRole,\n        },\n      }}>\n        {this.props.children}\n      </GlobalContext.Provider>\n    );\n  }\n}\n","import React, {ChangeEvent, FormEvent} from 'react';\nimport GraphqlError from \"../types/GraphqlError\";\nimport { GlobalConsumer } from '../contexts/GlobalContext';\nimport { GlobalContextObject } from '../types/GlobalContextObject';\n\ninterface Props {\n}\n\ninterface State {\n  email?: string;\n  password?: string;\n  errorMessage?: string;\n}\n\nexport default class AuthPage extends React.Component<Props, State> {\n\n  state = {\n    email: \"\",\n    password: \"\",\n    errorMessage: \"\",\n  };\n\n  handleSubmit = (event: FormEvent, userContext: GlobalContextObject) => {\n    event.preventDefault();\n\n    const {actions} = userContext;\n\n    const {email, password} = this.state;\n\n    const loginMutation = `\n      mutation {\n          login(email: \"${email}\", password: \"${password}\") {\n            token\n          }\n      }\n    `;\n\n    let graphqlEndpoint: string;\n    if (process.env.NODE_ENV === \"development\") {\n      graphqlEndpoint = \"http://localhost:4000\";\n    } else { // production\n        graphqlEndpoint = \"https://enthousiaste-livre-99440.herokuapp.com/\";\n    }\n\n    fetch(graphqlEndpoint, {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: loginMutation,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      mode: \"cors\",\n    }).then((response) => {\n      return response.json();\n    }).then((body) => {\n      if (body.errors) {\n        let errorMessage = body.errors.reduce((accumulator: string, error: GraphqlError) => {\n          return accumulator + \" \" + error.message;\n        }, \"\");\n        this.setState({\n          errorMessage: errorMessage\n        });\n      } else {\n        const token = body.data.login.token;\n        actions.setUserData(token);\n      }\n      console.log(body);\n    }).catch((error) => {\n        console.log(error);\n    });\n  };\n\n  handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n        [event.target.id]: event.target.value,\n      });\n  };\n\n  render() {\n    return (\n      <GlobalConsumer>\n        {(userContext: GlobalContextObject) => {\n          return (\n            <div>\n              <h1>The Login / Signup Page</h1>\n              <form\n                className={\"auth-form\"}\n                onSubmit={(event) => this.handleSubmit(event, userContext)}\n              >\n                <div className={\"form-control\"}>\n                  <label htmlFor=\"email\">Email</label>\n                  <input\n                    id={\"email\"}\n                    type={\"email\"}\n                    onChange={this.handleInputChange}\n                  />\n                </div>\n                <div className={\"form-control\"}>\n                  <label htmlFor=\"password\">Password</label>\n                  <input\n                    id={\"password\"}\n                    type={\"password\"}\n                    onChange={this.handleInputChange}\n                  />\n                </div>\n                <div className=\"form-actions\">\n                  <button type={\"button\"}>Switch to Signup</button>\n                  <button type={\"submit\"}>Submit</button>\n                </div>\n                {this.state.errorMessage\n                  ? <p>{this.state.errorMessage}</p>\n                  : null\n                }\n              </form>\n            </div>\n          );\n        }}\n      </GlobalConsumer>\n    );\n  }\n}\n","import React, {ChangeEvent, FormEvent} from 'react';\nimport Role from \"./types/Role\";\nimport fetchData from \"./utils/fetch-data\";\nimport LineData from \"./types/LineData\";\nimport {GlobalContextObject} from \"./types/GlobalContextObject\";\n\ninterface Props {\n  history: any;\n  match: any;\n  context: GlobalContextObject;\n}\n\ninterface State {\n  possibleRoles: Role[];\n  chosenRole: Role;\n  errorMessage: string;\n}\n\nexport default class RolePicker extends React.Component<Props, State> {\n\n  state = {\n    possibleRoles: [],\n    chosenRole: {\n      id: \"\",\n      name: \"\",\n    },\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    const {data} = this.props.context;\n    const {\n      params: {\n        dialogId\n      }\n    } = this.props.match;\n\n    const singleDialogQuery = `\n      query {\n        dialog(id: \"${dialogId}\") {\n          name\n          lines {\n            role {\n              id\n              name\n            }\n          }\n        }\n      }\n    `;\n\n    fetchData(singleDialogQuery, data.token, data.apiEndpoint, (body) => {\n\n      // Collect the ids of all the roles that are contained in the lines of the dialog\n      const rolesInDialog: Role[] = body.data.dialog.lines.reduce((accumulator: Role[], line: LineData) => {\n        let roleAlreadyInArray = accumulator.find((role: Role) => {\n          return line.role.id === role.id;\n        });\n\n        if (!roleAlreadyInArray) {\n          accumulator.push(line.role)\n        }\n\n        return accumulator;\n      }, ([] as Role[]));\n\n      this.setState({\n        possibleRoles: rolesInDialog,\n        chosenRole: rolesInDialog[0],\n      });\n\n    }, (errorMessage) => {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    });\n\n  }\n\n  handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedOption = event.target.selectedOptions[0];\n    this.setState({\n      chosenRole: {\n        id: selectedOption.value,\n        name: selectedOption.text,\n      },\n    });\n  };\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    this.props.context.actions.setChosenRole(this.state.chosenRole);\n\n    // Navigate to practice page for this dialog\n    const currentUrl = this.props.match.url;\n    const newUrl = currentUrl.replace(\"choose-role\", \"practice\");\n    this.props.history.push(newUrl);\n  };\n\n  render() {\n    return (\n      <>\n        <form data-testid={\"role-picker\"}\n              onSubmit={this.handleSubmit}>\n          <h2>Role Picker</h2>\n          <label htmlFor=\"role-picker__select\">Available Roles</label>\n          <select\n            name=\"role\"\n            id=\"role-picker__select\"\n            data-testid={\"role-picker__select\"}\n            value={this.state.chosenRole.id}\n            onChange={this.handleChange}\n          >\n            {this.state.possibleRoles.map((role: Role, index: number) => {\n              return <option key={index} value={role.id}>{role.name}</option>\n            })}\n          </select>\n          <input type={\"submit\"} data-testid={\"role-picker__submit\"} value={\"Confirm Role Selection\"}/>\n        </form>\n        {this.state.errorMessage ? <p>{this.state.errorMessage}</p> : null}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport {GlobalContextObject} from \"../types/GlobalContextObject\";\nimport RolePicker from \"../RolePicker\";\nimport {GlobalConsumer} from \"../contexts/GlobalContext\";\n\ninterface Props {\n  match: any;\n  location: any;\n  history: any;\n}\n\ninterface State {\n}\n\nexport default class ChooseRolePage extends React.Component<Props, State> {\n\n  render() {\n    return (\n      <GlobalConsumer>\n        {(context: GlobalContextObject) => {\n          return(\n            <>\n              <h1>The Choose Role Page</h1>\n              <RolePicker\n                history={this.props.history}\n                match={this.props.match}\n                context={context}\n              />\n            </>\n          );\n\n        }}\n      </GlobalConsumer>\n    );\n  }\n}\n","import React from 'react';\nimport Role from \"./types/Role\";\n\ninterface Props {\n    text: string;\n    key: number;\n    guess?: string;\n    role: Role;\n}\n\ninterface State {\n    name: string;\n}\n\nexport default class Line extends React.Component<Props, State> {\n    render() {\n        return (\n          <li data-testid={\"line\"}>\n            <span>{this.props.role.name}</span>\n            {this.props.guess ? <div>Guess: {this.props.guess}</div> : null}\n            <div>Line text: {this.props.text}</div>\n          </li>\n        );\n    };\n}\n","import React from 'react';\nimport LineData from \"./types/LineData\";\nimport Line from \"./Line\";\nimport Dialog from \"./types/Dialog\";\n\ninterface Props {\n  dialog: Dialog,\n  lastLineToDisplay: number;\n}\n\ninterface State {\n}\n\nexport default class ListOfLines extends React.Component<Props, State> {\n\n  state = {};\n\n  render() {\n    return (\n      <ul data-testid={\"lines\"} >\n        {this.props.dialog.lines.filter((lineData: LineData) => {\n          return lineData.number <= this.props.lastLineToDisplay;\n        }).map((lineData: LineData) => {\n          return (\n            <Line\n              key={lineData.number}\n              text={lineData.text}\n              guess={lineData.guess}\n              role={lineData.role}\n            />\n          );\n        })}\n      </ul>\n    );\n  }\n}\n","import React, {SyntheticEvent} from 'react';\nimport {SpeechRecognitionState} from \"./types/SpeechRecognitionState\";\n\ninterface Props {\n  updateSpeechRecognitionState: () => void;\n  speechRecognitionState: SpeechRecognitionState;\n}\n\ninterface State {\n\n}\n\nexport default class SpeechInputButton extends React.Component<Props, State> {\n\n  handleToggleSpeechInput = (event: SyntheticEvent) => {\n    event.preventDefault();\n\n    this.props.updateSpeechRecognitionState();\n  };\n\n  render() {\n    return (\n      <button onClick={this.handleToggleSpeechInput}>\n        {\n          this.props.speechRecognitionState === SpeechRecognitionState.Stopped\n            ? \"Start Speech Input\"\n            : \"Stop Speech Input\"\n        }\n      </button>\n    );\n  }\n}\n","import React, {ChangeEvent, FormEvent} from 'react';\nimport \"./LineGuess.css\";\nimport SpeechInputButton from \"./SpeechInputButton\";\nimport {SpeechRecognitionState} from \"./types/SpeechRecognitionState\";\nimport Role from \"./types/Role\";\n\ninterface Props {\n    userRole: Role;\n    addLineGuessToLastLine: (lineGuess: string) => void;\n    speechRecognition: any;\n}\n\ninterface State {\n  guess: string;\n  speechRecognitionState: SpeechRecognitionState;\n}\n\nexport default class LineGuess extends React.Component<Props, State> {\n\n  state: State = {\n    guess: \"\",\n    speechRecognitionState: SpeechRecognitionState.Stopped,\n  };\n\n  componentDidMount(): void {\n    this.props.speechRecognition.onresult = (event: any) => {\n      let results: SpeechRecognitionResultList = event.results;\n\n      let result_phrase = \"\";\n      for (let i = 0; i < results.length; i++) {\n        result_phrase += results[i][0].transcript;\n      }\n\n      this.setState({\n        guess: result_phrase,\n      });\n    };\n  }\n\n  handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      guess: event.target.value,\n    });\n  };\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    this.props.speechRecognition.stop();\n\n    this.props.addLineGuessToLastLine(this.state.guess);\n\n    this.setState({\n      guess: \"\",\n      speechRecognitionState: SpeechRecognitionState.Stopped,\n    });\n  };\n\n  updateSpeechRecognitionState = () => {\n    if (this.state.speechRecognitionState === SpeechRecognitionState.Stopped) {\n      this.props.speechRecognition.start();\n      this.setState({speechRecognitionState: SpeechRecognitionState.Started});\n    } else {\n      this.props.speechRecognition.stop();\n      this.setState({speechRecognitionState: SpeechRecognitionState.Stopped});\n    }\n  };\n\n  render() {\n      return (\n          <form\n            data-testid={\"line-guess\"}\n            onSubmit={this.handleSubmit}\n          >\n              <label htmlFor=\"line-guess__text-input\" data-testid={\"line-guess__label\"}>Line Guess</label>\n              <input\n                className={\"line-guess__text-input\"}\n                data-testid={\"line-guess__text-input\"}\n                id={\"line-guess__text-input\"}\n                onChange={this.handleInputChange}\n                placeholder={`Text of the next line for ${this.props.userRole.name}`}\n                type=\"text\"\n                value={this.state.guess}\n              />\n              <SpeechInputButton\n                updateSpeechRecognitionState={this.updateSpeechRecognitionState}\n                speechRecognitionState={this.state.speechRecognitionState}\n              />\n              <input type=\"submit\" data-testid={\"line-guess__submit\"} value={\"Submit Guess\"}/>\n          </form>\n      );\n  }\n}\n","import React from 'react';\nimport {GlobalContextObject} from \"../types/GlobalContextObject\";\nimport fetchData from \"../utils/fetch-data\";\nimport Role from \"../types/Role\";\nimport LineData from \"../types/LineData\";\nimport Dialog from \"../types/Dialog\";\nimport {GlobalConsumer} from \"../contexts/GlobalContext\";\nimport {InteractionMode} from \"../types/InteractionMode\";\nimport ListOfLines from \"../ListOfLines\";\nimport LineGuess from \"../LineGuess\";\n\ninterface Props {\n  context: GlobalContextObject;\n  match: any;\n  location: any;\n  history: any;\n}\n\ninterface State {\n  userLineNumberIndex: number;\n  userLineNumbers: number[];\n  dialog: Dialog;\n  mode: InteractionMode;\n  errorMessage: string;\n}\n\nexport default class PracticePage extends React.Component<Props, State> {\n\n  state = {\n    userLineNumberIndex: 0,\n    userLineNumbers: [],\n    dialog: {\n      id: \"\",\n      name: \"\",\n      lines: [],\n    },\n    errorMessage: \"\",\n    mode: InteractionMode.PracticingLines,\n  };\n\n  componentDidMount(): void {\n    const {data} = this.props.context;\n    const {\n      params: {\n        dialogId\n      }\n    } = this.props.match;\n\n\n    //region query\n    const singleDialogQuery = `\n      query {\n        dialog(id: \"${dialogId}\") {\n          name\n          lines {\n            text\n            guess\n            number\n            role {\n              id\n              name\n            }\n          }\n        }\n      }\n    `;\n    //endregion\n\n    fetchData(singleDialogQuery, data.token, data.apiEndpoint, (body) => {\n      const {dialog} = body.data;\n\n      // Calculate the user line numbers\n      const userLineNumbers = this.calculateUserLineNumbers(dialog, data.chosenRole);\n\n      this.setState({\n        dialog: dialog,\n        userLineNumbers: userLineNumbers,\n      });\n    }, (errorMessage) => {\n      this.setState({\n        errorMessage: errorMessage\n      });\n    });\n  }\n\n  /**\n   * Given a dialog and a role, returns an array of the line numbers that the role has in the dialog.\n   *\n   * @param dialog {Dialog} A dialog.\n   * @param role {Role} The role in the dialog that the user has picked to be.\n   *\n   * @return {number[]} An array of line numbers of the lines that are assigned to the given role in the dialog.\n   */\n  calculateUserLineNumbers(dialog: Dialog, role: Role): number[] {\n    const {lines} = dialog;\n\n    let userLines: LineData[] = lines.filter((line: LineData) => {\n      return (line.role.id === role.id);\n    });\n\n    return userLines.map((line: LineData) => {\n      return line.number;\n    });\n  }\n\n  addGuessToCurrentLineAndIncrementLineNumber = (lineGuess: string) => {\n    this.setState((previousState: State) => {\n      let currentLineNumber: number;\n      let nextLineIndex: number;\n      let nextMode: InteractionMode;\n      let nextDialog: Dialog;\n\n      currentLineNumber = previousState.userLineNumbers[previousState.userLineNumberIndex];\n\n      nextDialog = {\n        ...previousState.dialog\n      };\n\n      nextDialog.lines[currentLineNumber].guess = lineGuess;\n\n      nextLineIndex = previousState.userLineNumberIndex + 1;\n\n      if (nextLineIndex < previousState.userLineNumbers.length) {\n\n        nextMode = InteractionMode.PracticingLines;\n\n        return ({\n          ...previousState,\n          dialog: nextDialog,\n          userLineNumberIndex: nextLineIndex,\n          mode: nextMode,\n        });\n\n      } else {\n\n        nextMode = InteractionMode.DialogComplete;\n\n        return ({\n          ...previousState,\n          dialog: nextDialog,\n          userLineNumberIndex: previousState.userLineNumbers.length - 1,\n          mode: nextMode,\n        });\n\n      }\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <GlobalConsumer>\n          {(context: GlobalContextObject) => {\n            const {userLineNumbers, userLineNumberIndex} = this.state;\n\n            let currentLineNumber = 0;\n            if (userLineNumbers.length > 0) {\n              currentLineNumber = userLineNumbers[userLineNumberIndex];\n            }\n\n            switch (this.state.mode) {\n                case InteractionMode.PracticingLines:\n                  return (\n                    <>\n                      <h1>The Practice Page</h1>\n                      <ListOfLines\n                        dialog={this.state.dialog}\n                        lastLineToDisplay={currentLineNumber - 1}\n                      />\n                      <LineGuess\n                        userRole={context.data.chosenRole}\n                        addLineGuessToLastLine={this.addGuessToCurrentLineAndIncrementLineNumber}\n                        speechRecognition={context.data.speechRecognition}\n                      />\n                    </>\n                  );\n                case InteractionMode.DialogComplete:\n                  return (\n                    <ListOfLines\n                      dialog={this.state.dialog}\n                      lastLineToDisplay={this.state.dialog.lines.length - 1}\n                    />\n                  );\n              }\n          }}\n        </GlobalConsumer>\n        {this.state.errorMessage ? <p>{this.state.errorMessage}</p> : null}\n      </>\n    );\n  }\n}\n","/* global SpeechRecognition */\nimport React from 'react';\nimport {BrowserRouter, Route, Redirect, Switch} from 'react-router-dom';\nimport './App.css';\n\nimport Dialog from \"./types/Dialog\";\n\nimport {InteractionMode} from \"./types/InteractionMode\";\nimport DialogListPage from \"./pages/DialogListPage\";\nimport AuthPage from \"./pages/AuthPage\";\nimport ChooseRolePage from \"./pages/ChooseRolePage\";\nimport PracticePage from \"./pages/PracticePage\";\nimport {GlobalConsumer, GlobalProvider} from \"./contexts/GlobalContext\";\nimport {GlobalContextObject} from \"./types/GlobalContextObject\";\n\ninterface AppProps {\n  speechRecognition: SpeechRecognition;\n}\n\ninterface AppState {\n  dialogs: Dialog[];\n  currentDialog: Dialog;\n  numberOfLinesInDialog: number;\n  userRoleLineIndex: number;\n  userRole: string;\n  userRoleLineNumbers: number[];\n  mode: InteractionMode;\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n\n  state: AppState = {\n    dialogs: [],\n    currentDialog: {\n      id: \"random\",\n      name: \"\",\n      lines: [],\n    },\n    numberOfLinesInDialog: 0,\n    userRoleLineIndex: 0,\n    userRole: \"\",\n    userRoleLineNumbers: [],\n    mode: InteractionMode.LoadingData,\n  };\n\n  // async componentDidMount() {\n  //   // Get list of dialogs\n  //   let responseBody = await fetch(\"http://localhost/dialogs/\");\n  //   let responseJson: any = await responseBody.json();\n  //\n  //   let dialogs = responseJson._embedded.dialogs;\n  //\n  //   // Set SpeechRecognition object's settings\n  //   this.props.speechRecognition.lang = \"fr-FR\";\n  //   this.props.speechRecognition.continuous = true;\n  //   this.props.speechRecognition.interimResults = true;\n  //\n  //   this.setState((previousState: AppState) : object => {\n  //     return {\n  //       dialogs: dialogs,\n  //       mode: InteractionMode.ChoosingDialog,\n  //     };\n  //   });\n  // }\n\n  setUserRoleAndChangeMode = async (role: string) => {\n    // const userRoleLineNumbers = await this.calculateUserLineNumbers(\n    //   \"dummy string\", role\n    // );\n    //\n    // this.setState({\n    //   // userRole: role,\n    //   userRoleLineNumbers: userRoleLineNumbers,\n    //   mode: InteractionMode.PracticingLines,\n    // });\n  };\n\n  render() {\n    return (\n      <GlobalProvider speechRecognition={this.props.speechRecognition}>\n        <BrowserRouter>\n            <GlobalConsumer>\n              {(context: GlobalContextObject) => {\n                if (!context.data.token) {\n                  return (\n                    <>\n                      <Redirect from={\"/\"} to={\"/auth\"} />\n                      <Route path={\"/auth\"} component={AuthPage}/>\n                    </>\n                  );\n                } else {\n                  return (\n                    <Switch>\n                      <Redirect exact from={\"/\"} to={\"/dialogs\"}/>\n                      <Redirect from={\"/auth\"} to={\"/dialogs\"}/>\n                      <Route\n                        exact\n                        path={\"/dialogs\"}\n                        render={(routeProps) => {\n                          return (<DialogListPage {...routeProps} context={context}/>);\n                        }}\n                      />\n                      <Route\n                        path={\"/dialogs/:dialogId/choose-role\"}\n                        render={(routeProps) => {\n                          return (<ChooseRolePage {...routeProps}/>);\n                        }}\n                      />\n                      <Route\n                        path={\"/dialogs/:dialogId/practice\"}\n                        render={(routeProps) => {\n                          return (<PracticePage\n                            {...routeProps}\n                            context={context}\n                          />);\n                        }}\n                      />\n                    </Switch>\n                  );\n                }\n              }}\n            </GlobalConsumer>\n\n        </BrowserRouter>\n      </GlobalProvider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport {App} from './App';\n\ndeclare let webkitSpeechRecognition: {\n  new(): SpeechRecognition;\n};\n\nReactDOM.render(<App speechRecognition={new webkitSpeechRecognition()}/>, document.getElementById('root'));\n"],"sourceRoot":""}